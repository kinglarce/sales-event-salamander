services:
  postgres:
    image: postgres
    container_name: vivenu-pg-db
    restart: always
    env_file:
      - .env
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./dump:/tmp
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - vivenu-net

  pgweb:
    image: sosedoff/pgweb
    container_name: vivenu-pg-web
    depends_on:
      - postgres
    ports:
      - "8081:8081"
    environment:
      PGWEB_DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable"
    restart: always
    networks:
      - vivenu-net

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: vivenu-app
    stdin_open: true
    tty: true
    env_file:
      - .env
    volumes:
      - .:/app
    networks:
      - vivenu-net

  cron:
    build:
      context: .
      dockerfile: Dockerfile.cron
    container_name: vivenu-cron
    volumes:
      - ./logs:/app/logs
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
    restart: always
    depends_on:
      - postgres
    networks:
      - vivenu-net

  slackbot:
    build: 
      context: .
      dockerfile: ./slack_bot/Dockerfile.slackbot
    container_name: vivenu-slackbot
    env_file:
      - .env
    ports:
      - "3000:3000"
    depends_on:
      - postgres
    networks:
      - vivenu-net
    volumes:
      - .:/app
    environment:
      - PYTHONUNBUFFERED=1

volumes:
  postgres_data:
    name: vivenu-pg-data

networks:
  vivenu-net:
    driver: bridge
  app-network:
    driver: bridge